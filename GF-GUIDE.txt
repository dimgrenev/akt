Публикация шрифта в Google Fonts: краткий, но исчерпывающий гайд

Для кого: для шрифтовиков, у которых уже есть свой шрифт (или семейство) и которые хотят довести его до уровня публикации в Google Fonts (GF) без «магии» и мифов.
Тон: лёгкий, но без скидок к качеству. Где надо — ирония. Где важно — ссылки на первоисточники.

Содержание (10 шагов):
1) Что именно хочет Google Fonts
2) Репозиторий на GitHub и структура проекта
3) Локальная среда: инструменты и сборка
4) Исходники, лицензия, метаданные
5) Качество и автоматические проверки
6) Сабсетинг и METADATA.pb
7) CI/CD для шрифтового проекта
8) Как отдавать шрифт в Google Fonts
9) Работа в IDE и с ИИ-агентом
10) Пост-релиз: обновления и сопровождение


### 1) Что именно хочет Google Fonts
GF — это не «заливка TTF куда-то». Это стандартизируемая поставка: лицензия, структура, шейпинг, фичи, стабильная метрика, осмысленный STAT и ось(оси).
- Обязательная лицензия: SIL Open Font License 1.1. Текст — см. «Unified Font Repository OFL.txt» в репозитории-шаблоне. Источник: https://github.com/googlefonts/Unified-Font-Repository/blob/main/OFL.txt
- Требования к качеству и шейпингу: https://fonts.google.com/knowledge , https://github.com/googlefonts/glyphsets
- Про оси и STAT: https://github.com/googlefonts/registry , https://fonttools.readthedocs.io/en/latest/varLib/stat.html
- Проверки качества: https://github.com/fonttools/fontbakery

Так можно:
- Делать вариативный шрифт с одной осью `wght` (100–900), правильно описанной в STAT.
- Делать стабильную метрику, продуманный kerning, предсказуемые GSUB/GPOS.

Так нельзя:
- Пихать случайные фичи ради «галочек».
- Игнорировать soft-dotted поведение и комбинируемые знаки. FB это найдет.


### 2) Репозиторий на GitHub и структура проекта
Создайте публичный репозиторий. Минимально разумная структура для «поставщика» (ваш апстрим):
- sources/ — исходники (.glyphs или ufo/, *.designspace, config.yaml для gftools-builder)
- fonts/ — артефакты сборки (обычно генерятся; в апстриме можно хранить релизы отдельно)
- tools/ — скрипты сборки/починки
- OFL.txt, README.md, AUTHORS.txt (или аналог), CONTRIBUTORS, WORKFLOW.md
- makefile/Makefile с целями build, test, lint
Шаблон от Google Fonts: https://github.com/googlefonts/Unified-Font-Repository

Быстрый старт (GitHub):
- Новый репозиторий → Public → добавьте .gitignore (Python) → создайте README.
- Локально: `git clone <url>` → `cd <repo>` → создайте ветку для начала работ.
- Подключите защищённые ветки, обязательный статус CI для PR.

Рекомендации:
- Main ветка — «истина». Фичи — в коротких ветках, PR’ы — обязательно.
- Теги релизов вида vX.Y.Z. Версионирование — SemVer, но шрифтовое: большая смена метрик → major.
- Не коммитьте большие бинарники каждый коммит. Храните исходники, сборку выпускайте через релизы.


### 3) Локальная среда: инструменты и сборка
Минимальный набор:
- Python 3.10+ с venv
- fontmake, gftools, fonttools, ufo2ft, fontbakery
- harfbuzz/hb-shape (для отладки шейпинга)
- make (или uv/poetry для менеджмента)

Установка (macOS/Homebrew):
python3 -m venv venv
. venv/bin/activate
pip install --upgrade pip
pip install fontmake gftools[ufoprocessor] fonttools[ufo] ufo2ft fontbakery
brew install harfbuzz

Сборка (пример через gftools builder):
. venv/bin/activate
gftools builder sources/config.yaml


### 4) Исходники, лицензия, метаданные
- Исходники: .glyphs или *.ufo + *.designspace. Ориентируйтесь на то, чтобы сборка была полностью воспроизводимой из источников.
- Лицензия: OFL.txt строго по шаблону. Источник: https://github.com/googlefonts/Unified-Font-Repository/blob/main/OFL.txt
- Вендор-ID в OS/2: регистрируйте у Microsoft. Источник: https://docs.microsoft.com/en-us/typography/vendors/
- STAT/ось: опишите оси и их ranges. Источник: https://github.com/googlefonts/registry

Так можно:
- Держать config.yaml для gftools-builder, где прописано всё: пути исходников, фильтры, постобработки.

Так нельзя:
- Доставлять только TTF без источников. В GF это «красный флаг».


### 5) Качество и автоматические проверки
Запускайте FontBakery на локальной сборке:
. venv/bin/activate
fontbakery check-googlefonts --full-lists fonts/variable/FamilyName[axes].ttf

Что часто ломают:
- Soft hyphen U+00AD (softhyphen). Рекомендация GF — не включать или скрыть от экспорта (переносы делает движок разметки, не шрифт). Источники: https://github.com/fonttools/fontbakery/issues/4046
- Soft-dotted (i/j и кир. аналоги): точка должна исчезать под верхними диакритиками. `ccmp` + корректные `mark/mkmk`, фильтрация верхних комбинируемых. Гайд: https://googlefonts.github.io/gf-guide/diacritics.html и https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
- Шейпинг языков: смотрите googlefonts/glyphsets/shape_languages в отчёте FB. Для отладки — hb-shape.

Так можно:
- Явно задавать @CombiningTopAccents и править soft-dotted в ccmp + иметь заполненные mark/mkmk якорями.

Так нельзя:
- Компенсировать отсутствие mark/mkmk вручную подвинутыми глифами — в языках всё развалится.


### 6) Сабсетинг и METADATA.pb
GF режет семейства на сабсеты. Ваши codepoints должны попадать в объявленные сабсеты.
- FB «unreachable_subsetting» покажет недостижимые кодпойнты.
- METADATA.pb: семейство, стили, оси, категории, сабсеты. Источники: https://github.com/google/fonts/tree/main#contributing-a-font и https://github.com/googlefonts/glyphsets

Инструменты:
. venv/bin/activate
gftools add-font --autofix --manage-googlefonts fonts/variable/FamilyName[wght].ttf

Так можно:
- Сократить покрытие до реально поддерживаемого, чтобы не плодить «unreachable».

Так нельзя:
- Тащить экзотику «за компанию». FB всё равно поймает.


### 7) CI/CD для шрифтового проекта
- GitHub Actions: make build + FontBakery на PR. Источник: https://github.com/fonttools/fontbakery-action
- Кешируйте pip, артефакты — в релизы.
- Релизы — через GitHub Releases (ttf/otf/woff2), changelog, теги.

Так можно:
- Падение FB → блокирующий статус PR.

Так нельзя:
- «Зелёный» билд без FB/шейпинг-тестов.


### 8) Как отдавать шрифт в Google Fonts
1) Форкните https://github.com/google/fonts
2) Добавьте семейство в ofl/Familyname с корректным METADATA.pb и файлами шрифта
3) Пройдите чек-лист CONTRIBUTING: https://github.com/google/fonts/blob/main/CONTRIBUTING.md
4) Откройте PR и дождитесь ревью

Апстрим-репозиторий не обязателен, но ускоряет всё: источники, reproducible build, история.


### 9) Работа в IDE и с ИИ-агентом
- IDE: VS Code/Trae/Cursor. Клонируйте репо, подключите venv.
- Для Cursor/агентов: формализуйте правила в WORKFLOW.md, держите цели make (build, test, fb). Поручайте агенту воспроизводимые задачи (сборка, FB), а не «рисовать контуры».
- Просите агента менять фичи OT с объяснениями и ссылками на спецификации.
- Коммиты — атомарные; сообщения — содержательные.


### 10) Пост-релиз: обновления и сопровождение
- VendorID: после регистрации в MS предупреждение FB «unknown VendorID» исчезнет после их обновлений. Источник: https://docs.microsoft.com/en-us/typography/vendors/
- Минор: правьте контуры/шейпинг/локали. Мажор: при смене метрик/дизайна.
- Upstream держите живым: баги, reproducible build, changelog.
- Следите за https://fonts.google.com/knowledge и обновляйте инструменты.

Финальная проверка перед отправкой в GF:
. venv/bin/activate
make build
fontbakery check-googlefonts --full-lists fonts/variable/FamilyName[wght].ttf

Если есть ≥1 FAIL — не отправляйте. Доведите до WARN/INFO/PASS.

P.S. U+00AD (Soft Hyphen):
- GF его не любит в шрифте. Лучше не включать или скрыть экспорт — переносы не задача шрифта. Ссылки: https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar и https://github.com/fonttools/fontbakery/issues/4046
- Проверьте U+2010/U+2011 и пунктуацию по сабсетам.

Удачной публикации!
