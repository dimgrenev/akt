#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º —à—Ä–∏—Ñ—Ç–∞ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏
"""

import sys
from fontTools.ttLib import TTFont, newTable
from fontTools.ttLib.tables import ttProgram
from pathlib import Path
from typing import Tuple
import unicodedata
from fontTools.pens.basePen import DecomposingPen
from fontTools.pens.ttGlyphPen import TTGlyphPen

BASELINE_UNDERLINE_THICKNESS = None  # –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ø–µ—Ä—ë–∫ –≤–µ—Å–∞
# –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —à–∏—Ä–∏–Ω—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ —Å–µ–º–µ–π—Å—Ç–≤—É (—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ Regular)
CANONICAL_MATH_WIDTHS = {}
DESIRED_WIN_ASCENT = 1600
DESIRED_WIN_DESCENT = 400

def fix_font_issues(font_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ TTF —Ñ–∞–π–ª–µ"""
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {font_path}...")
    
    font = TTFont(font_path)
    glyf_table = font.get('glyf')
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º OS/2 —Ç–∞–±–ª–∏—Ü—É
    if 'OS/2' in font:
        os2 = font['OS/2']
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º sTypoLineGap
        if os2.sTypoLineGap != 0:
            print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º sTypoLineGap: {os2.sTypoLineGap} ‚Üí 0")
            os2.sTypoLineGap = 0
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º fsSelection –¥–ª—è USE_TYPO_METRICS
        if not (os2.fsSelection & (1 << 7)):
            print(f"  ‚úÖ –í–∫–ª—é—á–∞–µ–º USE_TYPO_METRICS")
            os2.fsSelection |= (1 << 7)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º fsType (—É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
        if os2.fsType != 0:
            print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º fsType: {os2.fsType} ‚Üí 0")
            os2.fsType = 0

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Vendor ID (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –Ω–∞ Microsoft)
        if getattr(os2, 'achVendID', 'NONE') in (None, 'NONE', '    '):
            os2.achVendID = 'DMGR'

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º usWeightClass –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (Akt-Weight.ttf)
        try:
            stem = Path(font_path).stem  # e.g., 'Akt-Bold'
            weight_token = stem.split('-', 1)[1] if '-' in stem else None
            weight_to_class = {
                'Thin': 100,
                'ExtraLight': 200,
                'Light': 300,
                'Regular': 400,
                'Medium': 500,
                'SemiBold': 600,
                'Bold': 700,
                'ExtraBold': 800,
                'Black': 900,
            }
            if weight_token in weight_to_class:
                expected_wc = weight_to_class[weight_token]
                if getattr(os2, 'usWeightClass', 0) != expected_wc:
                    print(f"  ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º usWeightClass: {getattr(os2, 'usWeightClass', 0)} ‚Üí {expected_wc} –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")
                    os2.usWeightClass = expected_wc
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fsSelection —Ñ–ª–∞–≥–æ–≤ Regular/Bold/Italic –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ —Å—Ç–∏–ª–µ–º
            is_bold = (weight_token == 'Bold')
            is_italic = False  # –∫—É—Ä—Å–∏–≤–æ–≤ –Ω–µ—Ç
            # fsSelection –±–∏—Ç—ã: 0=ITALIC, 5=BOLD, 6=REGULAR, 7=USE_TYPO_METRICS
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º –±–∏—Ç—ã 0/5/6
            os2.fsSelection &= ~(1 << 0)  # italic
            os2.fsSelection &= ~(1 << 5)  # bold
            os2.fsSelection &= ~(1 << 6)  # regular
            if is_italic:
                os2.fsSelection |= (1 << 0)
            if is_bold:
                os2.fsSelection |= (1 << 5)
            else:
                os2.fsSelection |= (1 << 6)

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª–∏–ø–ø–∏–Ω–≥–∞ –∏ –µ–¥–∏–Ω—ã–µ Win-–º–µ—Ç—Ä–∏–∫–∏:
            # winAscent/Descent ‚â• head.yMax/|yMin| –∏ ‚â• 1600/400
            try:
                if 'head' in font:
                    head = font['head']
                    yMax = getattr(head, 'yMax', None)
                    yMin = getattr(head, 'yMin', None)
                    target_ascent = max(int(getattr(os2, 'usWinAscent', 0) or 0), int(yMax or 0), DESIRED_WIN_ASCENT)
                    if getattr(os2, 'usWinAscent', 0) != target_ascent:
                        print(f"  ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º usWinAscent: {getattr(os2, 'usWinAscent', 0)} ‚Üí {target_ascent}")
                        os2.usWinAscent = target_ascent
                    if yMin is not None:
                        absMin = int(abs(yMin))
                        target_descent = max(int(getattr(os2, 'usWinDescent', 0) or 0), absMin, DESIRED_WIN_DESCENT)
                        if getattr(os2, 'usWinDescent', 0) != target_descent:
                            print(f"  ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º usWinDescent: {getattr(os2, 'usWinDescent', 0)} ‚Üí {target_descent}")
                            os2.usWinDescent = target_descent
            except Exception:
                pass
        except Exception:
            pass

        # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π (–≤—Å–µ –≥–ª–∏—Ñ—ã –æ–¥–Ω–æ–π —à–∏—Ä–∏–Ω—ã), –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏–º PANOSE –∏ isFixedPitch
        try:
            widths = set(aw for (aw, _lsb) in font['hmtx'].metrics.values())
        except Exception:
            widths = set()
        is_mono_by_metrics = len(widths) == 1 and len(widths) > 0
        if is_mono_by_metrics:
            # PANOSE proportion = 9 (monospace)
            try:
                if hasattr(os2, 'panose') and getattr(os2.panose, 'bProportion', 0) != 9:
                    print("  ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OS/2.panose.bProportion = 9 (monospace)")
                    os2.panose.bProportion = 9
            except Exception:
                pass
            # post.isFixedPitch = 1
            if 'post' in font and getattr(font['post'], 'isFixedPitch', 0) == 0:
                print("  ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º post.isFixedPitch = 1 (monospace)")
                font['post'].isFixedPitch = 1
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º hhea —Ç–∞–±–ª–∏—Ü—É
    if 'hhea' in font and 'OS/2' in font:
        hhea = font['hhea']
        os2 = font['OS/2']
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if hhea.ascent != os2.sTypoAscender:
            print(f"  ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ascender: hhea {hhea.ascent} ‚Üí OS/2 {os2.sTypoAscender}")
            hhea.ascent = os2.sTypoAscender
        
        if hhea.descent != os2.sTypoDescender:
            print(f"  ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º descender: hhea {hhea.descent} ‚Üí OS/2 {os2.sTypoDescender}")
            hhea.descent = os2.sTypoDescender
        
        if hhea.lineGap != 0:
            print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º hhea lineGap: {hhea.lineGap} ‚Üí 0")
            hhea.lineGap = 0

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ –≥–ª–∏—Ñ—ã U+0020 –∏ U+00A0
    try:
        hmtx = font['hmtx']
        glyf = font['glyf'] if 'glyf' in font else None
        cmap_table = font['cmap']
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ü–µ–ª–µ–≤—É—é —à–∏—Ä–∏–Ω—É (–º–∞–∫—Å–∏–º—É–º –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è, –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ –±—É–¥–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è)
        try:
            target_aw = max(aw for (aw, _lsb) in hmtx.metrics.values())
        except ValueError:
            target_aw = 600

        def ensure_glyph(name: str, uni: int):
            nonlocal glyf, hmtx, cmap_table, target_aw
            glyph_order = font.getGlyphOrder()
            if name not in glyph_order:
                if glyf is None:
                    return
                from fontTools.ttLib.tables._g_l_y_f import Glyph
                new_g = Glyph()
                new_g.numberOfContours = 0
                glyf[name] = new_g
                font.setGlyphOrder(glyph_order + [name])
                hmtx.metrics[name] = (target_aw, 0)
                # –î–æ–±–∞–≤–∏–º cmap mapping
                for subtable in cmap_table.tables:
                    if subtable.isUnicode():
                        subtable.cmap[uni] = name

        ensure_glyph('space', 0x0020)
        # NBSP —á–∞—Å—Ç–æ –∏–º–µ–Ω—É–µ—Ç—Å—è uni00A0
        ensure_glyph('uni00A0', 0x00A0)
    except Exception as e:
        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º/–∏—Å–ø—Ä–∞–≤–ª—è–µ–º 'gasp' —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    try:
        gasp = font.get('gasp') or newTable('gasp')
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        gasp.gaspRange = {0xFFFF: 0x0F}
        font['gasp'] = gasp
    except Exception as e:
        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å gasp: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º/–∏—Å–ø—Ä–∞–≤–ª—è–µ–º 'meta' —Ç–∞–±–ª–∏—Ü—É (dlng/slng) –∫–∞–∫ UTF-8 –±–∞–π—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    try:
        meta = font.get('meta') or newTable('meta')
        if not hasattr(meta, 'data') or meta.data is None:
            meta.data = {}
        # –¢–∞–±–ª–∏—Ü–∞ 'meta' –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏; –æ–±–µ—Å–ø–µ—á–∏–º str
        meta.data['slng'] = 'Latn,Cyrl'
        meta.data['dlng'] = 'Latn,Cyrl'
        font['meta'] = meta
    except Exception as e:
        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å meta: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π 'prep' —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º smart dropout
    try:
        prog = ttProgram.Program()
        # PUSHW 0x01FF ; SCANCTRL
        # PUSHB 0x04   ; SCANTYPE
        prog.fromBytecode([0xB8, 0x01, 0xFF, 0x85, 0xB0, 0x04, 0x8D])
        prep = newTable('prep')
        prep.program = prog
        font['prep'] = prep
    except Exception as e:
        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å prep: {e}")

    # –í–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç—å: –ù–ï —Ç—Ä–æ–≥–∞–µ–º head.fontRevision, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º NameID5
    try:
        # –û—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        pass
    except Exception:
        pass

    # –î–æ–±–∞–≤–ª—è–µ–º NameID 5/13/14 (Version / License Description / License URL)
    try:
        name = font['name']
        # –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç NameID 13: —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ URL
        ofl_snippet = "This Font Software is licensed under the SIL Open Font License, Version 1.1."
        # setName(text, nameID, platformID, platEncID, langID)
        name.setName(ofl_snippet, 13, 3, 1, 0x409)
        name.setName(ofl_snippet, 13, 1, 0, 0)
        license_url = "https://scripts.sil.org/OFL"
        name.setName(license_url, 14, 3, 1, 0x409)
        name.setName(license_url, 14, 1, 0, 0)

        # NameID 5 –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å head.fontRevision (–±–µ–∑ —Ñ–æ—Ä—Å‚Äë–º–∏–Ω–∏–º—É–º–∞)
        if 'head' in font:
            head = font['head']
            try:
                # –ú–∏–Ω–∏–º—É–º 1.000 –¥–ª—è GF —Ä–µ–ª–∏–∑–∞
                if float(head.fontRevision) < 1.0:
                    print(f"  ‚úÖ –ü–æ–≤—ã—à–∞–µ–º head.fontRevision: {head.fontRevision} ‚Üí 1.000 (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ GF)")
                    head.fontRevision = 1.0
                version_string = f"Version {float(head.fontRevision):.3f}"
            except Exception:
                version_string = "Version 1.000"
        else:
            version_string = "Version 1.000"
        # –ü–µ—Ä–µ–ø–∏—à–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ NameID 5 –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö/—è–∑—ã–∫–∞—Ö
        # –£–¥–∞–ª–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ NameID 5 –∏ NameID 16 (Typographic Family) –¥–ª—è —Å—Ç–∞—Ç–∏–∫–æ–≤
        name.names = [nr for nr in name.names if nr.nameID not in (5, 16)]
        name.setName(version_string, 5, 3, 1, 0x409)
        name.setName(version_string, 5, 3, 10, 0x409)  # UCS-4 fallback
        name.setName(version_string, 5, 1, 0, 0)

        # –û–±–Ω–æ–≤–∏–º NameID 3 (Unique font identifier) –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É GF —Ñ–æ—Ä–º–∞—Ç—É:
        # "Version X.XXX;VEND;PostScriptName"
        try:
            os2 = font['OS/2']
            vend = getattr(os2, 'achVendID', 'DMGR') or 'DMGR'
        except Exception:
            vend = 'DMGR'
        # –ø–æ—Å—Ç—Å–∫—Ä–∏–ø—Ç –∏–º—è –≤–æ–∑—å–º—ë–º –∏–∑ NameID 6, –µ—Å–ª–∏ –µ—Å—Ç—å
        ps = None
        for rec in name.names:
            if rec.nameID == 6 and rec.platformID == 3 and rec.platEncID == 1:
                try:
                    ps = str(rec.string, 'utf-16-be')
                except Exception:
                    ps = rec.toUnicode()
                break
        if not ps:
            # –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å: —Å–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            from pathlib import Path
            stem = Path(font_path).stem
            ps = stem.replace(' ', '')
        unique_str = f"{version_string};{vend};{ps}"
        # –∑–∞—á–∏—Å—Ç–∏–º –ø—Ä–µ–∂–Ω–∏–µ nameID 3
        name.names = [nr for nr in name.names if nr.nameID != 3]
        # platform 3,1 –∏ 1,0
        name.setName(unique_str, 3, 3, 1, 0x409)
        name.setName(unique_str, 3, 1, 0, 0)
    except Exception as e:
        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å NameID 13: {e}")

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å—Ç–∏–ª—è –∏ –∫ –∫–∞–Ω–æ–Ω—É —Å–µ–º—å–∏
    try:
        hmtx = font['hmtx']
        cmap = font['cmap']
        # cp ‚Üí –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∑–Ω–∞–∫–æ–≤
        math_cps = [
            0x002B,  # plus
            0x2212,  # minus
            0x00D7,  # multiply
            0x00F7,  # divide
            0x003D,  # equal
            0x2260,  # not equal
            0x2248,  # almost equal
            0x00B1,  # plusminus
            0x007E,  # tilde
        ]
        # –°–æ–±–µ—Ä—ë–º –º—ç–ø–ø–∏–Ω–≥ cp‚ÜíglyphName
        cp_to_glyph = {}
        for st in cmap.tables:
            if st.isUnicode():
                for cp, gname in st.cmap.items():
                    if cp in math_cps and cp not in cp_to_glyph:
                        cp_to_glyph[cp] = gname
        present = [cp for cp in math_cps if cp in cp_to_glyph]
        if present:
            # —Ü–µ–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π —Å—á–∏—Ç–∞–µ–º —à–∏—Ä–∏–Ω—É –ø–ª—é—Å–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –º–æ–¥—É –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–π —à–∏—Ä–∏–Ω—ã
            def get_aw(gname: str) -> int:
                try:
                    return hmtx.metrics[gname][0]
                except Exception:
                    return None
            target_aw = None
            if 0x002B in cp_to_glyph:
                target_aw = get_aw(cp_to_glyph[0x002B])
            if not target_aw:
                widths = {}
                for cp in present:
                    aw = get_aw(cp_to_glyph[cp])
                    if aw is not None:
                        widths[aw] = widths.get(aw, 0) + 1
                if widths:
                    target_aw = sorted(widths.items(), key=lambda kv: (-kv[1], kv[0]))[0][0]
            if target_aw:
                changed = 0
                for cp in present:
                    gname = cp_to_glyph[cp]
                    aw, lsb = hmtx.metrics.get(gname, (None, None))
                    if aw is None:
                        continue
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–æ–Ω –ø–æ —Å–µ–º–µ–π—Å—Ç–≤—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    fam_aw = CANONICAL_MATH_WIDTHS.get(cp)
                    final_aw = fam_aw if fam_aw else target_aw
                    if aw != final_aw:
                        hmtx.metrics[gname] = (final_aw, lsb)
                        changed += 1
                if changed:
                    print(f"  ‚úÖ –í—ã—Ä–æ–≤–Ω–µ–Ω—ã —à–∏—Ä–∏–Ω—ã –º–∞—Ç–∑–Ω–∞–∫–æ–≤: {changed} —à—Ç. (—Ü–µ–ª—å: {fam_aw if fam_aw else target_aw})")
    except Exception as e:
        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Ä–æ–≤–Ω—è—Ç—å –º–∞—Ç–∑–Ω–∞–∫–∏: {e}")

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ U+002E FULL STOP –≤ cmap (‚Üí 'period')
    try:
        if 'cmap' in font:
            cmap = font['cmap']
            glyph_order = set(font.getGlyphOrder())
            period_name = 'period' if 'period' in glyph_order else None
            if period_name is not None:
                for st in cmap.tables:
                    if st.isUnicode():
                        st.cmap[0x002E] = period_name
    except Exception as e:
        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å U+002E: {e}")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ head —Ñ–ª–∞–≥–æ–≤/macStyle (underlineThickness –Ω–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º)
    try:
        if 'head' in font:
            head = font['head']
            # –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ integer PPEM –¥–ª—è hinted: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ç 3
            head.flags |= (1 << 3)
            # macStyle: 0=BOLD, 1=ITALIC
            stem = Path(font_path).stem
            weight_token = stem.split('-', 1)[1] if '-' in stem else None
            is_bold = (weight_token == 'Bold')
            is_italic = False
            if is_bold:
                head.macStyle |= (1 << 0)
            else:
                head.macStyle &= ~(1 << 0)
            if is_italic:
                head.macStyle |= (1 << 1)
            else:
                head.macStyle &= ~(1 << 1)
    except Exception:
        pass

    # underlineThickness –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –≤ –º–∞—Å—Ç–µ—Ä‚Äë–∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–µ—Å–∞

    # –ü–æ–ª–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–∑–∏—Ç–æ–≤ –≤ –∫–æ–Ω—Ç—É—Ä—ã (–∑–∞–∫—Ä—ã–≤–∞–µ—Ç nested/transformed)
    try:
        if glyf_table is not None:
            glyph_set = font.getGlyphSet()

            def has_transform(t: Tuple[float, float, float, float, float, float]) -> bool:
                a, b, c, d, e, f = t
                return not (abs(a - 1.0) < 1e-6 and abs(b) < 1e-6 and abs(c) < 1e-6 and abs(d - 1.0) < 1e-6)

            # –°–æ–±–µ—Ä—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é
            to_decompose = []
            for gname in font.getGlyphOrder():
                try:
                    g = glyf_table[gname]
                except Exception:
                    continue
                if hasattr(g, 'isComposite') and g.isComposite():
                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∏ nested/transformed –¥–ª—è –æ—Ç—á—ë—Ç–∞
                    nested = False
                    transformed = False
                    for comp in getattr(g, 'components', []) or []:
                        if hasattr(comp, 'transform') and has_transform(comp.transform):
                            transformed = True
                        try:
                            cg = glyf_table[comp.glyphName]
                            if hasattr(cg, 'isComposite') and cg.isComposite():
                                nested = True
                        except Exception:
                            pass
                    to_decompose.append((gname, nested, transformed))

            if to_decompose:
                decomposed_count = 0
                for gname, nested, transformed in to_decompose:
                    try:
                        tt_pen = TTGlyphPen(glyph_set)
                        decomp_pen = DecomposingPen(glyph_set, tt_pen)
                        glyf_table[gname].draw(glyph_set, decomp_pen)
                        simple = tt_pen.glyph()
                        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≥–ª–∏—Ñ –≤—Å—ë –µ—â—ë composite (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False), –ø—Ä–æ–ø—É—Å—Ç–∏–º
                        if hasattr(simple, 'isComposite') and simple.isComposite():
                            continue
                        glyf_table[gname] = simple
                        decomposed_count += 1
                    except Exception:
                        continue
                if decomposed_count:
                    print(f"  ‚úÖ –î–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–æ –≥–ª–∏—Ñ–æ–≤: {decomposed_count}")
    except Exception:
        pass

    # –°–æ–∑–¥–∞—ë–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–Ω—ã–µ –º—ç–ø–ø–∏–Ω–≥–∏ (upper/lower) —Ç–æ–ª—å–∫–æ –≤ cmap (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≥–ª–∏—Ñ–æ–≤)
    try:
        cmap_table = font.get('cmap')
        if cmap_table:
            unicode_to_glyph = {}
            subtables = [st for st in cmap_table.tables if st.isUnicode()]
            for st in subtables:
                unicode_to_glyph.update(st.cmap)

            added = 0
            for cp, gname in list(unicode_to_glyph.items()):
                try:
                    ch = chr(cp)
                except ValueError:
                    continue
                cat = unicodedata.category(ch)
                if cat == 'Lu':
                    lower = ch.lower()
                    if len(lower) == 1:
                        cl = ord(lower)
                        if cl != cp and cl not in unicode_to_glyph:
                            for st in subtables:
                                st.cmap[cl] = gname
                            unicode_to_glyph[cl] = gname
                            added += 1
                elif cat == 'Ll':
                    upper = ch.upper()
                    if len(upper) == 1:
                        cu = ord(upper)
                        if cu != cp and cu not in unicode_to_glyph:
                            for st in subtables:
                                st.cmap[cu] = gname
                            unicode_to_glyph[cu] = gname
                            added += 1
            if added:
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–Ω—ã–µ –º—ç–ø–ø–∏–Ω–≥–∏ –≤ cmap: {added} —à—Ç.")
    except Exception as e:
        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å case-–º—ç–ø–ø–∏–Ω–≥ (cmap): {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    font.save(font_path)
    print(f"  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {font_path}")
    font.close()

def rename_and_fix_names_statics_gf(font_path: Path, base_family: str = "Akt") -> Path:
    """Normalize static TTF naming to Google Fonts statics scheme:
    - For Regular weight:
      * nameID 1 (Family): 'Akt'
      * nameID 2 (Subfamily): 'Regular'
      * nameID 4 (Full): 'Akt Regular'
      * nameID 6 (PostScript): 'Akt-Regular'
      * OMIT nameID 16/17
    - For non-Regular weights (e.g., Bold):
      * nameID 1 (Family): 'Akt Bold' (per-weight legacy family)
      * nameID 2 (Subfamily): 'Regular'
      * nameID 4 (Full): 'Akt Bold'
      * nameID 6 (PostScript): 'Akt-Bold'
      * nameID 16 (Typographic Family): 'Akt'
      * nameID 17 (Typographic Subfamily): 'Bold'
    File renamed to 'Akt-WeightName.ttf'. Returns new path.
    """
    ttf = TTFont(font_path)
    os2 = ttf['OS/2'] if 'OS/2' in ttf else None
    weight_class = getattr(os2, 'usWeightClass', None)
    weight_map = {
        100: 'Thin',
        200: 'ExtraLight',
        300: 'Light',
        400: 'Regular',
        500: 'Medium',
        600: 'SemiBold',
        700: 'Bold',
        800: 'ExtraBold',
        900: 'Black',
    }
    # Prefer filename token AFTER hyphen to infer style; fallback to OS/2 weight
    weight_name = None
    name_token = font_path.stem.split('-', 1)[1] if '-' in font_path.stem else None
    if name_token in weight_map.values():
        weight_name = name_token
    else:
        weight_name = weight_map.get(weight_class or 400, 'Regular')

    name = ttf['name']
    # Drop existing 1/2/4/6/16/17
    name.names = [nr for nr in name.names if nr.nameID not in (1, 2, 4, 6, 16, 17)]

    if weight_name == 'Regular':
        fam = base_family
        subfam = 'Regular'
        full = f"{base_family} Regular"
        ps = f"{base_family}-Regular".replace(' ', '')
        for pid, eid, lid in [(3,1,0x409), (1,0,0)]:
            name.setName(fam, 1, pid, eid, lid)
            name.setName(subfam, 2, pid, eid, lid)
            name.setName(full, 4, pid, eid, lid)
            name.setName(ps, 6, pid, eid, lid)
        canonical = f"{base_family}-Regular.ttf"
    elif weight_name == 'Bold':
        # Bold is a supported style in the main family (RIBBI)
        fam = base_family
        subfam = 'Bold'
        full = f"{base_family} Bold"
        ps = f"{base_family}-Bold".replace(' ', '')
        for pid, eid, lid in [(3,1,0x409), (1,0,0)]:
            name.setName(fam, 1, pid, eid, lid)
            name.setName(subfam, 2, pid, eid, lid)
            name.setName(full, 4, pid, eid, lid)
            name.setName(ps, 6, pid, eid, lid)
        canonical = f"{base_family}-Bold.ttf"
    else:
        fam = f"{base_family} {weight_name}"
        subfam = 'Regular'
        full = fam
        ps = f"{base_family}-{weight_name}".replace(' ', '')
        for pid, eid, lid in [(3,1,0x409), (1,0,0)]:
            name.setName(fam, 1, pid, eid, lid)
            name.setName(subfam, 2, pid, eid, lid)
            name.setName(full, 4, pid, eid, lid)
            name.setName(ps, 6, pid, eid, lid)
            name.setName(base_family, 16, pid, eid, lid)
            name.setName(weight_name, 17, pid, eid, lid)
        canonical = f"{base_family}-{weight_name}.ttf"

    ttf.save(font_path)
    ttf.close()
    new_path = font_path.with_name(canonical)
    if new_path != font_path:
        font_path.rename(new_path)
    return new_path

def main():
    global BASELINE_UNDERLINE_THICKNESS
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ TTF —Ñ–∞–π–ª—ã
    ttf_files = list(Path('fonts/ttf').glob('*.ttf'))
    variable_files = list(Path('fonts/variable').glob('*.ttf'))
    
    all_files = ttf_files + variable_files
    
    if not all_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ TTF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return 1
    
    # –û–ø—Ä–µ–¥–µ–ª–∏–º baseline underlineThickness –∏ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –º–∞—Ç-—à–∏—Ä–∏–Ω—ã –∏–∑ Regular, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        regular_path = Path('fonts/ttf/Akt-Regular.ttf')
        if regular_path.exists():
            reg = TTFont(regular_path)
            BASELINE_UNDERLINE_THICKNESS = getattr(reg['post'], 'underlineThickness', None)
            # –°—á–∏—Ç–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —à–∏—Ä–∏–Ω—ã –º–∞—Ç–∑–Ω–∞–∫–æ–≤
            try:
                hmtx = reg['hmtx']
                cmap = reg['cmap']
                math_cps = [0x002B, 0x2212, 0x00D7, 0x00F7, 0x003D, 0x2260, 0x2248, 0x00B1, 0x007E]
                cp_to_glyph = {}
                for st in cmap.tables:
                    if st.isUnicode():
                        for cp, gname in st.cmap.items():
                            if cp in math_cps and cp not in cp_to_glyph:
                                cp_to_glyph[cp] = gname
                for cp, gname in cp_to_glyph.items():
                    try:
                        CANONICAL_MATH_WIDTHS[cp] = hmtx.metrics[gname][0]
                    except Exception:
                        pass
                if CANONICAL_MATH_WIDTHS:
                    print(f"  ‚ÑπÔ∏è –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –º–∞—Ç-—à–∏—Ä–∏–Ω—ã –≤–∑—è—Ç—ã –∏–∑ Regular: {len(CANONICAL_MATH_WIDTHS)}")
            except Exception:
                pass
            reg.close()
    except Exception:
        BASELINE_UNDERLINE_THICKNESS = None
    
    import traceback
    renamed_paths = []
    for font_file in all_files:
        try:
            fix_font_issues(font_file)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {font_file}: {e}")
            traceback.print_exc()
            return 1
        # Apply single-family naming to any Akt*.ttf except legacy AktGrotesk
        try:
            if font_file.name.startswith('Akt') and not font_file.name.startswith('AktGrotesk'):
                new_path = rename_and_fix_names_statics_gf(font_file)
                renamed_paths.append((font_file, new_path))
        except Exception as e:
            print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ {font_file}: {e}")
    
    print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤")
    if renamed_paths:
        print("üî§ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã:")
        for old, new in renamed_paths:
            print(f"  {old.name} ‚Üí {new.name}")
    print("üîÑ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: make update-metadata && make qa")
    return 0

if __name__ == '__main__':
    sys.exit(main())
